/*
  Text flow on LED matrix 8x8

 Hardware required :
 * LED matrix 8x8
 * 8x resistor 330
 * Arduino UNO

 v 0.1.0 - Martin Mikala, May 2, 2016
 Part of code from Arduino book - Průvodce světem Arduina, http://arduino.cz/
 
 ASCII font 5x7 from https://www.ccsinfo.com/forum/viewtopic.php?p=34689

*/

// ASCII font array
// rows -> {1,2,3,4,5,6,7,8}
// column 0x00 -> 0xFF
// 128 characters
  byte font[128][8] =
   {{0,0,0,0,0,0,0,0},                        //0x00  
    {0,0,0,0,0,0,0,0},                        //0x01
    {0,0,0,0,0,0,0,0},                        //0x02
    {0,0,0,0,0,0,0,0},                        //0x03
    {0,0,0,0,0,0,0,0},                        //0x04
    {0,0,0,0,0,0,0,0},                        //0x05
    {0,0,0,0,0,0,0,0},                        //0x06
    {0,0,0,0,0,0,0,0},                        //0x07
    {0,0,0,0,0,0,0,0},                        //0x08
    {0,0,0,0,0,0,0,0},                        //0x09
    {0,0,0,0,0,0,0,0},                        //0x0A
    {0,0,0,0,0,0,0,0},                        //0x0B
    {0,0,0,0,0,0,0,0},                        //0x0C
    {0,0,0,0,0,0,0,0},                        //0x0D
    {0,0,0,0,0,0,0,0},                        //0x0E
    {0,0,0,0,0,0,0,0},                        //0x0F
    {0,0,0,0,0,0,0,0},                        //0x10
    {0,0,0,0,0,0,0,0},                        //0x11
    {0,0,0,0,0,0,0,0},                        //0x12
    {0,0,0,0,0,0,0,0},                        //0x13
    {0,0,0,0,0,0,0,0},                        //0x14
    {0,0,0,0,0,0,0,0},                        //0x15
    {0,0,0,0,0,0,0,0},                        //0x16
    {0,0,0,0,0,0,0,0},                        //0x17
    {0,0,0,0,0,0,0,0},                        //0x18
    {0,0,0,0,0,0,0,0},                        //0x19
    {0,0,0,0,0,0,0,0},                        //0x1A
    {0,0,0,0,0,0,0,0},                        //0x1B
    {0,0,0,0,0,0,0,0},                        //0x1C
    {0,0,0,0,0,0,0,0},                        //0x1D
    {0,0,0,0,0,0,0,0},                        //0x1E
    {0,0,0,0,0,0,0,0},                        //0x1F
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x20, Space
   {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00},   // 0x21, !
   {0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x22, "
   {0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a, 0x00},   // 0x23, #
   {0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04, 0x00},   // 0x24, $
   {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x00},   // 0x25, %
   {0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x00},   // 0x26, &
   {0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x27, '
   {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00},   // 0x28, (
   {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00},   // 0x29, )
   {0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x00},   // 0x2a, *
   {0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00, 0x00},   // 0x2b, +
   {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x00},   // 0x2c, ,
   {0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00},   // 0x2d, -
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00},   // 0x2e, .
   {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00},   // 0x2f, /
   {0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e, 0x00},   // 0x30, 0
   {0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x00},   // 0x31, 1
   {0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f, 0x00},   // 0x32, 2
   {0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e, 0x00},   // 0x33, 3
   {0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02, 0x00},   // 0x34, 4
   {0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e, 0x00},   // 0x35, 5
   {0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e, 0x00},   // 0x36, 6
   {0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x00},   // 0x37, 7
   {0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e, 0x00},   // 0x38, 8
   {0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c, 0x00},   // 0x39, 9
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x00},   // 0x3a, :
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x00},   // 0x3b, ;
   {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00},   // 0x3c, <
   {0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00},   // 0x3d, =
   {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00},   // 0x3e, >
   {0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00},   // 0x3f, ?
   {0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x00},   // 0x40, @
   {0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x00},   // 0x41, A
   {0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e, 0x00},   // 0x42, B
   {0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e, 0x00},   // 0x43, C
   {0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e, 0x00},   // 0x44, D
   {0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f, 0x00},   // 0x45, E
   {0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x00},   // 0x46, F
   {0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f, 0x00},   // 0x37, G
   {0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0x00},   // 0x48, H
   {0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x00},   // 0x49, I
   {0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c, 0x00},   // 0x4a, J
   {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00},   // 0x4b, K
   {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x00},   // 0x4c, L
   {0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00},   // 0x4d, M
   {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x00},   // 0x4e, N
   {0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00},   // 0x4f, O
   {0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10, 0x00},   // 0x50, P
   {0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d, 0x00},   // 0x51, Q
   {0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11, 0x00},   // 0x52, R
   {0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e, 0x00},   // 0x53, S
   {0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00},   // 0x54, T
   {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00},   // 0x55, U
   {0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00},   // 0x56, V
   {0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11, 0x00},   // 0x57, W
   {0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11, 0x00},   // 0x58, X
   {0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04, 0x00},   // 0x59, Y
   {0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f, 0x00},   // 0x5a, Z
   {0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x00},   // 0x5b, [
   {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x00},   // 0x5c, \
   {0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00},   // 0x5d, ]
   {0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x5e, ^
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00},   // 0x5f, _
   {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x60, `
   {0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d, 0x00},   // 0x61, a
   {0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c, 0x00},   // 0x62, b
   {0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e, 0x00},   // 0x63, c
   {0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07, 0x00},   // 0x64, d
   {0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f, 0x00},   // 0x65, e
   {0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08, 0x00},   // 0x66, f
   {0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e, 0x00},   // 0x67, g
   {0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x00},   // 0x68, h
   {0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e, 0x00},   // 0x69, i
   {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c, 0x00},   // 0x6a, j
   {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12, 0x00},   // 0x6b, k
   {0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00},   // 0x6c, l
   {0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11, 0x00},   // 0x6d, m
   {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00},   // 0x6e, n
   {0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e, 0x00},   // 0x6f, o
   {0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10, 0x00},   // 0x70, p
   {0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01, 0x00},   // 0x71, q
   {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00},   // 0x72, r
   {0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e, 0x00},   // 0x73, s
   {0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06, 0x00},   // 0x74, t
   {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0x00},   // 0x75, u
   {0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00},   // 0x76, v
   {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a, 0x00},   // 0x77, w
   {0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x00},   // 0x78, x
   {0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e, 0x00},   // 0x79, y
   {0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f, 0x00},   // 0x7a, z
   {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x00},   // 0x7b, {
   {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00},   // 0x7c, |
   {0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x00},   // 0x7d, }
   {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x7e, ~
   {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00}    // 0x7f, DEL
   };

byte columns[] = {2,3,4,5,6,7,8,9};                        //pins for columns 1-8
byte rows[] = {A5,A4,A3,A2,A1,A0,10,11};                   //pins for rows 1-8
boolean rowon = LOW;                                       // row bit on/off value
boolean rowoff = HIGH;
boolean colon = HIGH;                                      // column bit on/off value
boolean coloff = LOW;
String text = "Hello world!  ";                              // TEXT for FLOW 

//LED matrix memory
byte matrix[8] = {0,0,0,0,0,0,0,0};

   
void setup(){
  for(int i = 0; i < 8; i++){
  //set pins
  pinMode(columns[i], OUTPUT);
  pinMode(rows[i], OUTPUT);

  //turn off LEDs
  digitalWrite(columns[i], coloff);
  digitalWrite(rows[i], rowoff);
  }
}

void loop(){
  byte revbit[8] = {7,6,5,4,3,2,1,0};                       // reverse order for bits  
  for(int t = 0;t < text.length(); t++) {                   // show characters oftext
    char c = text.charAt(t);                                // one char from text
    for(int n = 5; n >= 0; n--) {                           // shift new char to right 5-4-3-2-1
      for(int m = 0; m < 8;m++) {                           // set rows
          matrix[m] = (matrix[m] << 1) | (font[c][m] >> n); // shift 1 current row to left OR with new char shift n to right 
      }
      for(int r = 0; r < 10; r++) {                         // redraw 10 times
        drawMatrix(matrix);  
        delay(1);                                             // wait for next character
      }
    }
  }
}

void drawMatrix(byte mat[8]) {
  byte revbit[8] = {7,6,5,4,3,2,1,0};                   // reverse order for bits
  for(int i = 0; i < 8; i++){                           // loop for each column
    digitalWrite(columns[i], colon);                    // ON col i
    byte row = mat[revbit[i]];                          //read bits for row   
    for(int j = 0; j < 8; j++){                         // loop for row bits    
       if(bitRead(row,j) == 1){                          //if bit j is 1, turn on LED
          digitalWrite(rows[j], rowon);
       }
    }
    delay(2);                                           //waiting, lighting short time    
    for(int j = 0; j < 8; j++){                         //OFF all rows
      digitalWrite(rows[j], rowoff);
    }
    digitalWrite(columns[i], coloff);                   // OFF column
  }
}
